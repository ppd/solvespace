name: CI

on:
  push:
  release:
    types: [created]

jobs:
  test-ubuntu:
    name: Test Ubuntu
    runs-on: ubuntu-18.04
    steps:
    - run: exit 0

  build-release-windows:
    needs: [test-ubuntu]
    name: Build Release Windows
    runs-on: ubuntu-18.04
    steps:
    - run: echo "Exe" > solvespace.exe
    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: windows-exe
        path: solvespace.exe

  build-release-macos:
    needs: [test-ubuntu]
    name: Build Release macOS
    runs-on: ubuntu-18.04
    steps:
    - run: echo "DMG" > SolveSpace.dmg
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: macos-dmg
        path: SolveSpace.dmg
  
  update_edge_release:
    name: Update Edge Release
    needs: [build-release-windows, build-release-macos]
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Download All Workflow Artifacts
      uses: actions/download-artifact@v2
    - name: Delete Old Edge Release
      uses: dev-drprasad/delete-tag-and-release@v0.1.2
      with:
        delete_release: true
        tag_name: edge
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Create New Edge Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: edge
        release_name: Edge
        prerelease: true
        body: ${{ github.event.head_commit.message }}
    - name: Upload solvespace.exe
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: windows-exe/solvespace.exe
        asset_name: solvespace.exe
        asset_content_type: text/plain
    - name: Upload SolveSpace.dmg
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: macos-dmg/SolveSpace.dmg
        asset_name: solvespace.exe
        asset_content_type: text/plain


  # upload-release-assets:
  #   name: Upload Release Assets
  #   needs: [test-ubuntu]
  #   if: github.event_name == "release"
  #   runs-on: ubuntu-latest

  



        


  # deploy-windows:
  #   needs: [test-ubuntu, test-windows, test-macos]
  #   name: Deploy Windows
  #   runs-on: windows-2019
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Install Dependencies
  #     run: .travis/install-windows.sh
  #     shell: bash
  #   - name: Build & Test
  #     run: .travis/build-windows.sh release
  #     shell: bash
  #   - name: Upload artifact
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: windows-exe
  #       path: build/bin/RelWithDebInfo/solvespace.exe

  # deploy-windows-openmp:
  #   needs: [test-ubuntu, test-windows, test-macos]
  #   name: Deploy Windows with OpenMP
  #   runs-on: windows-2019
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Install Dependencies
  #     run: .travis/install-windows.sh
  #     shell: bash
  #   - name: Build & Test
  #     run: .travis/build-windows.sh release openmp
  #     shell: bash
  #   - name: Upload artifact
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: windows-openmp-exe
  #       path: build/bin/RelWithDebInfo/solvespace-openmp.exe

  # test-ubuntu:
  #     runs-on: ubuntu-18.04
  #     steps:
  #     - uses: actions/checkout@v2
  #     - name: Install Dependencies
  #       run: .travis/install-ubuntu.sh
  #     - name: Build & Test
  #       run: .travis/build-ubuntu.sh

  # test-windows:
  #   runs-on: windows-2019
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Add msbuild to PATH
  #     uses: microsoft/setup-msbuild@v1.0.2
  #   - name: Install Dependencies
  #     run: .travis/install-windows.sh
  #   - name: Build & Test
  #     run: .travis/build-windows.sh
  #     shell: bash

  # test-macos:
  #   runs-on: macos-latest
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Install Dependencies
  #     run: .travis/install-macos.sh
  #   - name: Build & Test
  #     run: .travis/build-macos.sh
